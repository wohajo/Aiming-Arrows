// ************** THIS IS FILE USED TO STORE IDEAS THAT CANNOT BE IMPLEMENTED YE(E)T ****************

// enum for arrow states in which direction they are pointing, it probably will be used to change the look
// and maybe prevent from turning too much   
// L = Left, U = Up, D = Down, R = Right, C = Center 

enum ArrowState {
LU
LD
LC
UL
UC
UR
RU
RC
RD
DL
DC
DR 
}

Class Arrow extends Elements {

	short int clickCounter = 0;	
}

// addition
// there are 2 tables: 
// Array gameBoard <Elements> <- table on which player operates using arrows
// Array solutionBoard <Cell> <- table to which the gameBoard Cells will be compared


// following block of code is the logic of adding and subtracting 1, happening after clicking the arrow
// clickCounter is used to check which direction the arrow is pointing to 
// in case of a corner arrow, 0 is straight and 1 is either right or left depending on which side the arrow has a block that does completely nothing
// in case of a middle arrow, 0 is left, 1 is straight and 2 is right (perspective from behind the arrow)
// Cord X is as usual, Cord Y is upside down to ease the calculations

int arrowCordX = arrow.getCordX();
            int arrowCordY = arrow.getCordY();
            for (int x = 0; x < ; x ++) {
                if (switcher == 1) {
                    currentGameBoard[][] ++;
                } else {
                    currentGameBoard[][] --;
                }
                arrowCordY ;
                arrowCordX ;
            }



